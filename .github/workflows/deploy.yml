name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  IMAGE_URL: gcr.io/cabby-392012/cabby-service
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  run-ci:
    name: Run CI Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Check types
        run: npm run check:types

      - name: Check linting
        run: npm run lint

      - name: Check formatting
        run: npm run format:check

  build-and-deploy-staging:
    if: github.event_name == 'push' || github.ref != 'refs/heads/main'
    environment:
      name: staging
    name: Build and Deploy to Cloud Run (Staging)
    needs: run-ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm install

      - name: Build
        run: npm run build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Build and push Docker image to GCR
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          echo "$GCP_CREDENTIALS" | docker login -u _json_key --password-stdin https://gcr.io
          docker build -t ${{ env.IMAGE_URL }}:staging-${{ github.sha }} --build-arg SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN .
          docker push ${{ env.IMAGE_URL }}:staging-${{ github.sha }}

      - name: Deploy to Cloud Run (Staging)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.SERVICE_NAME }}
          region: ${{ secrets.REGION }}
          image: ${{ env.IMAGE_URL }}:staging-${{ github.sha }}
          env_vars: |
            NODE_ENV=staging
            ENVIRONMENT=staging
            APP_BASE_URL=https://cabby-service-staging-jtj2mdm6ta-ez.a.run.app
            SECRET_KEY=${{ secrets.SECRET_KEY_STAGING }}
            DATABASE_URL=${{ secrets.DATABASE_URL_STAGING }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY_STAGING }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY_STAGING }}
            JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY_STAGING }}
            MOLLIE_API_KEY=${{ secrets.MOLLIE_API_KEY_STAGING }}
            MINDEE_API_KEY=${{ secrets.MINDEE_API_KEY }}
            FIREBASE_KEY=${{ secrets.FIREBASE_KEY }}
            FIREBASE_SERVICE_ACCOUNT_BASE64=${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
            TESLA_CLIENT_ID=${{ secrets.TESLA_CLIENT_ID }}
            TESLA_CLIENT_SECRET=${{ secrets.TESLA_CLIENT_SECRET }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}

  build-and-deploy-production:
    environment:
      name: production
    name: Build and Deploy to Cloud Run (Production)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: run-ci
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ env.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true

      - name: Build and push Docker image to GCR
        env:
          GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: |
          echo "$GCP_CREDENTIALS" | docker login -u _json_key --password-stdin https://gcr.io
          docker build -t ${{ env.IMAGE_URL }}:production-${{ github.sha }} --build-arg SENTRY_AUTH_TOKEN=$SENTRY_AUTH_TOKEN .
          docker push ${{ env.IMAGE_URL }}:production-${{ github.sha }}

      - name: Deploy to Cloud Run (Production)
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ secrets.SERVICE_NAME }}
          region: ${{ secrets.REGION }}
          image: ${{ env.IMAGE_URL }}:production-${{ github.sha }}
          env_vars: |
            NODE_ENV=production
            ENVIRONMENT=production
            APP_BASE_URL=https://cabby-service-production-jtj2mdm6ta-ez.a.run.app
            SECRET_KEY=${{ secrets.SECRET_KEY_PRODUCTION }}
            DATABASE_URL=${{ secrets.DATABASE_URL_PRODUCTION }}
            SENDGRID_API_KEY=${{ secrets.SENDGRID_API_KEY_PRODUCTION }}
            JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY_PRODUCTION }}
            JWT_REFRESH_SECRET_KEY=${{ secrets.JWT_REFRESH_SECRET_KEY_PRODUCTION }}
            MOLLIE_API_KEY=${{ secrets.MOLLIE_API_KEY_PRODUCTION }}
            MINDEE_API_KEY=${{ secrets.MINDEE_API_KEY }}
            FIREBASE_KEY=${{ secrets.FIREBASE_KEY }}
            FIREBASE_SERVICE_ACCOUNT_BASE64=${{ secrets.FIREBASE_SERVICE_ACCOUNT_BASE64 }}
            TESLA_CLIENT_ID=${{ secrets.TESLA_CLIENT_ID }}
            TESLA_CLIENT_SECRET=${{ secrets.TESLA_CLIENT_SECRET }}
            SENTRY_DSN=${{ secrets.SENTRY_DSN }}
            SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}
