// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  PENDING
  BLOCKED
  REJECTED
  DEACTIVATED
}

enum UserRole {
  ADMIN
  USER
}

model user {
  id                  String               @id @default(uuid())
  email               String               @unique
  password            String
  revokeTokensBefore  DateTime             @default(now())
  status              UserStatus?
  role                UserRole             @default(USER)
  createdAt           DateTime             @default(now())
  profile             userProfile?
  passwordResetTokens passwordResetToken[]
  otp                 String? // Store hashed OTP for security.
  otpExpiry           DateTime? // OTP validity check.
  emailOtp            String?
  emailOtpExpiry      DateTime? // OTP validity check.

  payments                      payment[]
  orders                        order[]
  damageReports                 damageReport[]
  sentMessages                  message[]                      @relation("MessageSender")
  receivedMessages              message[]                      @relation("MessageRecipient")
  registrationOrder             registrationOrder?
  CustomerSupportRepresentative CustomerSupportRepresentative?
  userTokens                    userTokens?
  logs                          Logs[]
  notifications                 Notification[]
}

model passwordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  expiry    DateTime
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

enum UserProfileStatus {
  PENDING
  ACTIVE
  INACTIVE
  BLOCKED
  APPROVED
  REJECTED
  REQUIRE_REGISTRATION_FEE
}

model userProfile {
  id          String  @id @default(uuid())
  userId      String  @unique
  city        String
  fullAddress String
  fullName    String
  lastName    String
  firstName   String
  phoneNumber String?

  profilePhoto     String?
  signature        String?
  zip              String?
  dateOfBirth      String?
  status           UserProfileStatus @default(REQUIRE_REGISTRATION_FEE)
  user             user              @relation(fields: [userId], references: [id], onDelete: Cascade)
  driverLicense    driverLicense?
  permitDetails    permitDetails?
  userVerification userVerification?
  driverRejection  driverRejection?
  refunds          Refunds[]
}

model driverLicense {
  id                  String      @id @default(uuid())
  driverLicenseBack   String?
  driverLicenseExpiry String?
  bsnNumber           String?
  driverLicenseFront  String?
  driverLicense       String?
  userProfileId       String      @unique
  userProfile         userProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model permitDetails {
  id                String      @id @default(uuid())
  kiwaDocument      String?
  kvkDocument       String?
  kvkNumber         Int?
  taxiPermitId      String?
  taxiPermitExpiry  String?
  taxiPermitPicture String?
  companyName       String?
  userProfileId     String      @unique
  userProfile       userProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model userVerification {
  id            String @id @default(uuid())
  userProfileId String @unique

  extractedFirstName   String?
  extractedLastName    String?
  extractedBsnNumber   String?
  extractedDateOfBirth String?
  extractedExpiryDate  String?

  // Existing data fields (from user profile)
  existingFirstName   String?
  existingLastName    String?
  existingBsnNumber   String?
  existingDateOfBirth String?
  existingExpiryDate  String?

  isFirstNameMatch   Boolean
  isLastNameMatch    Boolean
  isExpiryDateMatch  Boolean
  isBsnNumberMatch   Boolean
  isDateOfBirthMatch Boolean
  createdAt          DateTime @default(now())

  userProfile userProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

model driverRejection {
  id            String      @id @default(uuid())
  userProfileId String      @unique
  reason        String
  date          DateTime    @default(now())
  userProfile   userProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
}

enum VehicleStatus {
  PENDING
  ACTIVE
  REJECTED
  BLOCKED
}

enum VehicleEngineType {
  BENZINE
  HYBRIDE_BENZINE
  DIESEL
  HYBRIDE_DIESEL
  ELEKTRISCH
}

model vehicle {
  id                       String             @id @default(uuid())
  logo                     String?
  companyName              String?
  model                    String?
  rentalDuration           String?
  licensePlate             String?            @unique
  category                 String?
  manufactureYear          String?
  engineType               VehicleEngineType?
  seatingCapacity          String?
  batteryCapacity          String?
  uniqueFeature            String?
  streetName               String?
  streetNumber             String?
  zipcode                  String?
  state                    String?
  title                    String?
  description              String?
  images                   String[]
  registrationCertificates String[]
  insuranceCertificates    String[]
  papers                   String[]
  availability             String?
  unavailabilityReason     String?
  currency                 String?            @default("EUR")
  pricePerDay              Decimal?           @db.Decimal(6, 2)
  status                   VehicleStatus      @default(PENDING)
  vin                      String?
  timeframes               Json?
  createdAt                DateTime           @default(now())
  updatedAt                DateTime           @default(now()) @updatedAt

  orders        order[]
  rejection     vehicleRejection?
  damageReports damageReport[]
}

enum PaymentProduct {
  RENT
  REGISTRATION
}

enum PaymentStatus {
  OPEN
  CANCELED
  PENDING
  AUTHORIZED
  EXPIRED
  FAILED
  PAID
  REFUNDED
}

model payment {
  id                  String             @id @default(uuid())
  userId              String
  mollieId            String?            @unique
  amount              Decimal            @db.Decimal(6, 2)
  currency            String             @default("EUR")
  paymentDate         DateTime           @default(now())
  orderId             String?            @unique
  registrationOrderId String?            @unique
  product             PaymentProduct     @default(RENT)
  status              PaymentStatus      @default(PAID)
  user                user               @relation(fields: [userId], references: [id], onDelete: Cascade)
  order               order?             @relation(fields: [orderId], references: [id], onDelete: Cascade)
  registrationOrder   registrationOrder? @relation(fields: [registrationOrderId], references: [id], onDelete: Cascade)
  invoiceUrl          String?

  @@unique([userId, paymentDate])
  @@index([registrationOrderId], name: "idx_registrationOrderId")
}

enum RegistrationOrderStatus {
  OPEN
  CANCELED
  PENDING
  AUTHORIZED
  EXPIRED
  FAILED
  PAID
  REFUNDED
}

model registrationOrder {
  id          String                  @id @default(uuid())
  userId      String                  @unique
  status      RegistrationOrderStatus @default(PENDING)
  totalAmount Decimal                 @db.Decimal(6, 2) // The fixed registration fee
  paymentId   String?                 @unique
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt
  note        String? // Any additional notes
  invoiceUrl  String?

  user    user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment payment?

  @@index([userId], name: "idx_registrationOrder_userId")
}

enum OrderStatus {
  UNPAID
  PENDING
  CONFIRMED
  REJECTED
  COMPLETED
  CANCELED
}

model order {
  id                   String      @id @default(uuid())
  vehicleId            String
  userId               String
  status               OrderStatus @default(UNPAID)
  totalAmount          Decimal     @db.Decimal(6, 2)
  rentalStartDate      DateTime
  rentalEndDate        DateTime
  stopRentDate         DateTime?
  paymentId            String?     @unique
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  note                 String?
  isVehicleUnlocked    Boolean     @default(false)
  overdueEmailSentDate DateTime?

  vehicle   vehicle         @relation(fields: [vehicleId], references: [id])
  user      user            @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment   payment?
  rejection orderRejection?

  @@unique([vehicleId, rentalStartDate, rentalEndDate])
}

model orderRejection {
  id      String   @id @default(uuid())
  orderId String   @unique // Associated Order ID
  reason  String // Text field explaining why the order was rejected
  date    DateTime @default(now()) // The date when the order was rejected

  order order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId], name: "idx_orderId")
}

model vehicleRejection {
  id        String   @id @default(uuid())
  vehicleId String   @unique // Associated Order ID
  reason    String // Text field explaining why the order was rejected
  date      DateTime @default(now()) // The date when the order was rejected

  vehicle vehicle @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId], name: "idx_vehicleId")
}

model damageReport {
  id          Int          @id @default(autoincrement())
  reportedAt  DateTime     @default(now())
  description String
  status      ReportStatus @default(UNDERPAID)
  amount      Float?
  repairedAt  DateTime?
  vehicleId   String
  userId      String
  images      String[]     @default([])
  vehicle     vehicle      @relation(fields: [vehicleId], references: [id])
  user        user         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReportStatus {
  UNDERPAID
  REPAIRED
}

model message {
  id          String   @id @default(uuid())
  senderId    String
  recipientId String
  content     String
  createdAt   DateTime @default(now())

  // Relations
  sender    user @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  recipient user @relation("MessageRecipient", fields: [recipientId], references: [id], onDelete: Cascade)
}

model CustomerSupportRepresentative {
  id     String @id @default(uuid())
  userId String

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model userTokens {
  id     String @id @default(uuid())
  userId String
  token  String

  user user @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model TeslaToken {
  id           Int      @id @default(autoincrement())
  token        String
  refreshToken String
  createdAt    DateTime @default(now())
}

model Refunds {
  id            Int         @id @default(autoincrement())
  amount        Decimal     @db.Decimal(6, 2)
  userProfileId String
  userProfile   userProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Settings {
  id    Int    @id @default(autoincrement())
  key   String @unique
  value String
}

model Logs {
  id        Int      @id @default(autoincrement())
  url       String
  method    String
  body      Json
  query     Json
  params    Json
  ip        String?
  createdAt DateTime @default(now())
  userId    String?
  user      user?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  data Json
}

enum NOTIFICATION_EVENT {
  NEW_CAR
  ORDER_CONFIRMED
  HOLIDAY
  FREE_HOURS
  ORDER_WILL_START
  ORDER_WILL_END
}

model Notification {
  id        Int                @id @default(autoincrement())
  event     NOTIFICATION_EVENT
  title     String
  content   String
  param     String?
  createdAt DateTime           @default(now())
  closedAt  DateTime?

  user   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}
